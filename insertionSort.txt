//best method

function insertionSort(arr){
  let i, len = arr.length, el, j;

  for(i = 1; i<len; i++){
    el = arr[i];
    j = i;

    while(j>0 && arr[j-1]>el){
      arr[j] = arr[j-1];
      j--;
   }

   arr[j] = el;
  }

  return arr;
}
console.log(insertionSort([12, 11, 13, 5, 6]))
console.log(insertionSort([3, 0, 2, 5, -1, 4, 1]));
console.log(insertionSort([11,8,14,3,6,2,7]))


function insertion_Sort(arr)
{
  for (let i = 1; i < arr.length; i++) 
  {
    if (arr[i] < arr[0]) 
    {
      //move current element to the first position
      arr.unshift(arr.splice(i,1)[0]);
    } 
    else if (arr[i] > arr[i-1]) 
    {
      //leave current element where it is
      continue;
    } 
    else {
      //find where element should go
      for (let j = 1; j < i; j++) {
        if (arr[i] > arr[j-1] && arr[i] < arr[j]) 
        {
          //move element
          arr.splice(j,0,arr.splice(i,1)[0]);
        }
      }
    }
  }
  return arr;
}

console.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));
console.log(insertion_Sort([11,8,14,3,6,2,7]))

//geeksforgeeks

function insertionSort(arr){

  for(let i =1; i < arr.length ; i++){
    let key = arr[i];
    let j = i-1;
    while(j >= 0 && arr[j] > key){
      arr[j+1]=arr[j];
      j = j-1;
          
    }
    arr[j+1] = key;
  }
  return arr;
}

console.log(insertionSort( [12, 11, 13, 5, 6]))

