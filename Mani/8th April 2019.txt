// //spiral traversal 


// let arr = [[1,2,3,4,5],
//            [6,7,8,9,10],
//            [11,12,13,14,15],
//            [16,17,18,19,20],
//            [21,22,23,24,25],
//           [16,17,18,19,30]
//           ];



// let out = [];
// let spiralTraversal = (arr) => {
  
//   if(arr.length === 0) {
//      return out;
//   }
  
//   out = [...out, ...arr.shift()];
  
//   arr.forEach((item, index) => {
//       out.push(item.pop());
//   });
  
//   if(arr.length)
//     out = [...out, ...arr.pop().reverse()];
  
//   arr.reverse().forEach((item,index) => {
//       out.push(item.shift());
//   })
  
//   arr.reverse();
  
//   return spiralTraversal(arr);
  
// }


// console.log(spiralTraversal(arr));


// //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



// //matrix implementatino

// let arr1 = [[1,2],
//             [2,2]];


// let arr2 = [[5,6],
//             [4,7]];



// function multiplyMatrix(m1, m2) {
//     var result = [];   
//        for(var j = 0; j < m2.length; j++) {
//         result[j] = [];        
//         for(var k = 0; k < m1[0].length; k++) {
//             var sum = 0;
//             for(var i = 0; i < m1.length; i++) {
//                 sum += m1[k][i] * m2[i][j];
//             }            result[j].push(sum);
//         }
//     }
//     return result; 
// }

// console.log(multiplyMatrix(arr1,arr2))





// // //Implementation of Stack

// // class Stack {
// //   constructor() {
// //      this.item = [];
// //   }
  
// //   push = (key) => {
// //      this.item.push(key);
// //   }
  
// //   pop = () => {
// //     return this.item.pop();
// //   }
  
// //   peek = () => {
// //       return this.item[this.item.length - 1];
// //   }
  
// //   printStack = () => {
// //      let str = ''
// //     for(let [index,value] of this.item.entries()) {
// //       str += value + (index === this.item.length - 1 ? '' : ',');
// //     }
// //     return str;
// //   }
  
// //   isEmpty = () => {
// //     return this.item.length === 0;
// //   }
  
  
// //   sortStack = () => {
// //       if(!this.isEmpty()){
// //         let temp = this.pop();
// //         this.sortStack(this.item);
        
// //       console.log(temp)
// //         this.sortedStack(this.item, temp);
// //       }
// //   }
  
// //   sortedStack = (item, t) => {

// //       console.log(t)
// //     if(this.isEmpty() || t > this.peek()) {
      
// //        this.push(t);
// //       return;
// //     }
  
// //     let temp = this.pop(this.item); 
// //     this.sortedStack(this.item, temp); 
  
// //     // Put back the top item removed earlier 
// //     this.push(this.item, temp)
    
// //     return this.item;
// //   }
// // }


// // let stack = new Stack();

// // stack.push(20);
// // stack.push(10);
// // stack.push(100);

// // console.log(stack.sortStack());


// //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


// //check for ugly number.
// const checkUglyNumber = (n) => {
//   let [i, count] = [1,1];
//   while(n > count) {
//      i++;
//     if(isUgly(i)){
//        count++;
//     }
//   }
//   return i;
// }

// let isUgly = num => {
//     var arr = [2, 3, 5];
//     arr.forEach(function(prime) {
//         while (num && num % prime === 0) {
//             num /= prime;
//         }
//     });
    
//     return num === 1;
// };

// console.log(checkUglyNumber(10));


// //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


// //overlapping rectangles

//   let l1 = {x: 0, y: 10};
//   let r1 = {x: 10, y: 0}; 
//   let l2 = {x: 5, y: 5}; 
//   let r2 = {x: 15, y: 0}; 



// let overLappingRectangle = () => {
     
//     if(l1.x > r2.x || l2.x > r1.x) 
//       return 'not overlapped';
  
//     if(l1.y<r2.y || l2.y< r1.y)
//      return 'not overlapped';
  
//      return 'Over lapped';
// }

// console.log(overLappingRectangle());


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const eggDropping = (egg, floor) => {
  
  if( floor === 1 || floor === 0) {
     return floor;
  }
  if(egg=== 1) {
     return floor;
  }
  let res; 
  let min = 999;
  let i;
  for( i = 1; i <= floor; i++) {  
     res = Math.max(eggDropping(egg - 1, floor - 1), eggDropping(egg, floor - i))
        if (res < min) 
            min = res; 
  }
    return min + 1;
}

console.log(eggDropping(2, 10));

